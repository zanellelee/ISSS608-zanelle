---
title: "Hands-On Exercise 5a (Creating Ternary Plot with R)"
author: "Zanelle Lee Wenfang"
date-modified: "last-modified"
execute:
    echo: true
    eval: true
    warning: false
    freeze: true
---

### Overview

Ternary plots are a way of displaying the distribution and variability of a three-part compositional data. It is a triangle with sides scaled from 0 to 1 with each side representing one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

**The hands-on exercise consists of four steps:**

-   Install and launch **tidyverse** and **ggtern** packages.

-   Derive three new measures using *mutate()* function of **dplyr** package.

-   Build a static ternary plot using *ggtern()* function of **ggtern** package.

-   Build an interactive ternary plot using *plot-ly()* function of **Plotly R** package.

::: callout-tip
## R packages used

**ggtern**: a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.

**Plotly R**: a R package for creating interactive web-based graphs via plotlyâ€™s JavaScript graphing library, plotly.js . The plotly R libary contains the ggplotly function, which will convert ggplot2 figures into a Plotly object.

**tidyverse** *family package needed, namely* **readr, dplyr, tidyr** *version 3.2.1 of* **ggplot2** *to be installed as current version of* **ggtern** *is not compatible with latest version of* **ggplot2**.
:::

### Installing R packages

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

### Importing data

::: callout-note
Using [Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) data for this exercise.
:::

```{r}
#Reading the data into R environment
pop_data <- read_csv("Data files/respopagsex2000to2018_tidy.csv") 
```

### Preparing the data

Using *mutate()* function of **dplyr** package, we obtain 3 new measures - young, active, and old.

```{r}
#Deriving the young, economy active and old measures
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

### Plotting Ternary Diagram

Using *ggtern()* function of **ggtern** package to create a simple ternary plot.

```{r}
#Building the static ternary plot
ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point()

#Building the static ternary plot
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2015") +
  theme_rgbw()
```

### Plotting an interactive ternary diagram

Using *plot_ly()* function of **Plotly R**.

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary"
) %>%
  layout(
    annotations = label("Ternary Markers"), 
    ternary = ternaryAxes
  )
```
